//To create DOUBLY LL and perform all opertaions
#include <stdio.h>
#include <stdlib.h>

struct node
{
    struct node *prev;
    int data;
    struct node *next;
};
struct node *head = NULL, *ptr;

void insert_start(int value)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->prev = NULL;
    temp->next = NULL;
    if (head == NULL)
    {
        head = temp;
    }
    else
    {
        temp->next = head;
        head->prev = temp;
        head = temp;
    }
}

void insert_last(int value)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->prev = NULL;
    temp->next = NULL;
    if (head == NULL)
    {
        head = temp;
    }
    else
    {
        ptr = head;
        while (ptr->next != NULL)
        {
            ptr = ptr->next;
        }
        ptr->next = temp;
        temp->prev = ptr;
    }
}

void insert_at_specific(int value, int ele)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    temp->data = value;
    temp->prev = NULL;
    temp->next = NULL;
    if (head == NULL)
    {
        head = temp;
    }
    else
    {
        ptr = head;
        while (ptr != NULL && ptr->data != ele)
        {
            ptr = ptr->next;
        }
        if (ptr == NULL)
        {
            printf("Element not found in the list.\n");
            free(temp);
            return;
        }
        temp->next = ptr->next;
        if (ptr->next != NULL)
        {
            ptr->next->prev = temp;
        }
        temp->prev = ptr;
        ptr->next = temp;
    }
}

void delete_start()
{
    if (head == NULL)
    {
        printf("List is empty");
        return;
    }
    ptr = head;
    head = head->next;
    if (head != NULL)
    {
        head->prev = NULL;
    }
    free(ptr);
}

void delete_last()
{
    if (head == NULL)
    {
        printf("List is empty");
        return;
    }
    ptr = head;
    while (ptr->next != NULL)
    {
        ptr = ptr->next;
    }
    if (ptr->prev != NULL)
    {
        ptr->prev->next = NULL;
    }
    if (ptr == head)
    {
        head = NULL;
    }
    free(ptr);
}

void delete_mid(int ele)
{
    if (head == NULL)
    {
        printf("List is empty");
        return;
    }
    ptr = head;
    while (ptr != NULL && ptr->data != ele)
    {
        ptr = ptr->next;
    }
    if (ptr == NULL)
    {
        printf("Element not found");
        return;
    }
    if (ptr->prev != NULL)
    {
        ptr->prev->next = ptr->next;
    }
    if (ptr->next != NULL)
    {
        ptr->next->prev = ptr->prev;
    }
    if (ptr == head)
    {
        head = ptr->next;
    }
    free(ptr);
}

void display()
{
    if (head == NULL)
    {
        printf("List is empty");
    }
    else
    {
        ptr = head;
        while (ptr != NULL)
        {
            printf("%d <->", ptr->data);
            ptr = ptr->next;
        }
        printf("\n");
    }
}

int main()
{
    int ch, value, ele;
    printf("1.Insert node at start\n");
    printf("2.Insert node at last\n");
    printf("3.Insert node at specific position\n");
    printf("4.Delete node at start\n");
    printf("5.Delete node at last\n");
    printf("6.Delete node at specific position\n");
    printf("7.Exit\n");

    while (1)
    {
        printf("Enter choice:");
        scanf("%d", &ch);

        switch (ch)
        {
        case 1:
            printf("Enter the value:");
            scanf("%d", &value);
            insert_start(value);
            display();
            break;
        case 2:
            printf("Enter the value:");
            scanf("%d", &value);
            insert_last(value);
            display();
            break;
        case 3:
            printf("Enter the value:");
            scanf("%d", &value);
            printf("Enter the element after which you want to insert: ");
            scanf("%d", &ele);
            insert_at_specific(value, ele);
            display();
            break;
        case 4:
            delete_start();
            display();
            break;
        case 5:
            delete_last();
            display();
            break;
        case 6:
            printf("Enter the element you want to delete: ");
            scanf("%d", &ele);
            delete_mid(ele);
            display();
            break;
        case 7:
            exit(0);
        default:
            printf("Invalid choice\n");
        }
    }

    return 0;
}
