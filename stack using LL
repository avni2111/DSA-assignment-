//to implement stack using LL and perform operations
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};

struct node *top = NULL;

void push(int value)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL)
    {
        printf("Memory allocation failed. Stack is full");
        return;
    }
    temp->data = value;
    temp->next = top;
    top = temp;
}

void pop()
{
    if (top == NULL)
    {
        printf("Stack is empty");
        return;
    }
    struct node *temp = top;
    top = top->next;
    free(temp);
}

int peek()
{
    if (top == NULL)
    {
        printf("Stack is empty");
        return -1;
    }
    return top->data;
}

int isEmpty()
{
    return top == NULL;
}

void display()
{
    if (top == NULL)
    {
        printf("Stack is empty");
        return;
    }
    struct node *current = top;
    printf("Stack elements:");
    while (current != NULL)
    {
        printf("%d ", current->data);
        current = current->next;
    }
    printf("\n");
}

int main()
{
    int ch, value;
    printf("1.Push\n");
    printf("2.Pop\n");
    printf("3.Peek\n");
    printf("4.Empty\n");
    printf("5.Display\n");
    printf("6.Exit\n");

    while (1)
    {
        printf("Enter choice:");
        scanf("%d", &ch);

        switch (ch)
        {
        case 1:
            printf("Enter the value to push:");
            scanf("%d", &value);
            push(value);
            break;
        case 2:
            pop();
            break;
        case 3:
            value = peek();
            if (value != -1)
            {
                printf("Top of the stack: %d\n", value);
            }
            break;
        case 4:
            if (isEmpty())
            {
                printf("Stack is empty");
            }
            else
            {
                printf("Stack is not empty");
            }
            break;
        case 5:
            display();
            break;
        case 6:
            exit(0);
        default:
            printf("Invalid choice");
        }
    }

    return 0;
}

